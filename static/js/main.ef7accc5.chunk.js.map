{"version":3,"sources":["public/img/preloader.png","components/Preloader/Preloader.tsx","components/Tooltip/Tooltip.tsx","components/Card/Card.tsx","components/SeacrhBar/SearchBar.tsx","components/Container/Container.tsx","App.tsx","hooks/debounce.ts","index.tsx"],"names":["Preloader","className","width","height","src","preloader","alt","Tooltip","name","status","species","Card","image","SearchBar","value","setSearchValue","placeholder","type","maxLength","onChange","e","target","Container","children","CHARACTERS","gql","App","useState","searchValue","searchText","setSearchText","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","useQuery","variables","loading","data","characters","useMemo","results","length","map","id","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"wXAAe,G,MAAA,IAA0B,uC,eCI5BA,EAAgB,kBAC3B,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAYC,MAAM,MAAMC,OAAO,MAAMC,IAAKC,EAAWC,IAAI,iBCG/DC,G,MAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,QAAjB,OAC7B,qBAAIT,UAAU,UAAd,UACI,qBAAIA,UAAU,gBAAd,mBAAqCO,KACrC,qBAAIP,UAAU,gBAAd,qBAAuCQ,KACvC,qBAAIR,UAAU,gBAAd,sBAAwCS,UCFvCC,G,MAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,KAAME,EAAhB,EAAgBA,QAASD,EAAzB,EAAyBA,OAAzB,OAC7B,sBAAKR,UAAU,UAAf,UACE,qBAAKA,UAAU,YAAYG,IAAKQ,EAAON,IAAKE,IAC5C,cAAC,EAAD,CAASA,KAAMA,EAAMC,OAAQA,EAAQC,QAASA,SCNrCG,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,eAAV,OACvC,uBACEd,UAAU,YACVe,YAAY,sBACZC,KAAK,OACLC,UAAW,GACXJ,MAAOA,EACPK,SAAU,SAACC,GAAD,OAAOL,EAAeK,EAAEC,OAAOP,Y,QCZhCQ,G,MAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,mCAC3B,qBAAKtB,UAAU,YAAf,SAA4BsB,MCKxBC,EAAaC,YAAH,uTAqFDC,MAtCf,WAAgB,IAAD,EACyBC,mBAAiB,IAD1C,mBACNC,EADM,KACOb,EADP,OAEuBY,mBAAiB,IAFxC,mBAENE,EAFM,KAEMC,EAFN,KAIPC,ECvD6B,SAACjB,GAAwB,IAAjBkB,EAAgB,uDAAR,IAAQ,EACfL,mBAASb,GADM,mBACpDmB,EADoD,KACpCC,EADoC,KAY3D,OATAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAkBpB,KACjBkB,GACH,OAAO,WACLM,aAAaF,MAEd,CAACtB,EAAOkB,IAEJC,ED2CsBM,CAAYX,GAJ5B,EAMaY,YAAyBhB,EAAY,CAC7DiB,UAAW,CACTZ,gBAFIa,EANK,EAMLA,QAASC,EANJ,EAMIA,KAMXC,EAAaC,mBAAQ,+BAAMF,QAAN,IAAMA,GAAN,UAAMA,EAAMC,kBAAZ,aAAM,EAAkBE,UAAS,CAACH,IAM7D,OAJAR,qBAAU,WACJP,EAAYmB,OAAS,GAAGjB,EAAcF,KACzC,CAACG,IAGF,uBAAM9B,UAAU,MAAhB,UACE,cAAC,EAAD,CAAWa,MAAOc,EAAab,eAAgBA,IAC9C2B,GAAW,cAAC,EAAD,IACZ,cAAC,EAAD,UACGE,GAAcA,EAAWG,OAAS,EACnCH,EAAWI,KAAI,gBAAGC,EAAH,EAAGA,GAAIzC,EAAP,EAAOA,KAAMI,EAAb,EAAaA,MAAOH,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,QAA5B,OACb,cAAC,EAAD,CAEEA,QAASA,EACTD,OAAQA,EACRD,KAAMA,EACNI,MAAOA,GAJFqC,MAMJ,6BElFPC,EAAS,IAAIC,IAAa,CAC5BC,IAAK,sCACLC,MAAO,IAAIC,MAGfC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACI,cAAC,EAAD,QAGRS,SAASC,eAAe,W","file":"static/js/main.ef7accc5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.73303d18.png\";","import { FC } from 'react'\nimport preloader from '../../public/img/preloader.png'\nimport './Preloader.css'\n\nexport const Preloader: FC = () => (\n  <div className=\"overlay\">\n    <img className=\"preloader\" width=\"150\" height=\"150\" src={preloader} alt=\"preloader\" />\n  </div>\n)\n","import { FC } from \"react\";\nimport \"./Tooltip.css\";\n\ninterface ITooltip {\n    name: string;\n    status: string;\n    species: string;\n}\n\nexport const Tooltip: FC<ITooltip> = ({ name, status, species }) => (\n        <ul className=\"tooltip\">\n            <li className=\"tooltip__item\">Name: {name}</li>\n            <li className=\"tooltip__item\">Status: {status}</li>\n            <li className=\"tooltip__item\">Species: {species}</li>\n        </ul>\n    )","import { FC } from 'react'\nimport { Tooltip } from '../Tooltip/Tooltip'\nimport './Card.css'\n\ninterface ICard {\n  image: string\n  name: string\n  species: string\n  status: string\n}\n\nexport const Card: FC<ICard> = ({ image, name, species, status }) => (\n  <div className=\"wrapper\">\n    <img className=\"character\" src={image} alt={name} />\n    <Tooltip name={name} status={status} species={species} />\n  </div>\n)\n","import { Dispatch, FC, SetStateAction } from 'react'\nimport \"./SearchBar.css\"\n\ninterface ISearchBar {\n  value: string\n  setSearchValue: Dispatch<SetStateAction<string>>\n}\n\nexport const SearchBar: FC<ISearchBar> = ({ value, setSearchValue }) => (\n  <input\n    className=\"searchbar\"\n    placeholder=\"Type character name\"\n    type=\"text\"\n    maxLength={50}\n    value={value}\n    onChange={(e) => setSearchValue(e.target.value)}\n  />\n)\n","import { FC } from 'react'\nimport \"./Container.css\"\n\nexport const Container: FC = ({ children, ...props }) => (\n  <div className=\"container\">{children}</div>\n)\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport './App.css'\nimport { Preloader } from './components/Preloader/Preloader'\nimport { Card } from './components/Card/Card'\nimport { useDebounce } from './hooks/debounce'\nimport { SearchBar } from './components/SeacrhBar/SearchBar'\nimport { Container } from './components/Container/Container'\n\nconst CHARACTERS = gql`\n  query getList($searchText: String!) {\n    characters(filter: { name: $searchText }) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        name\n        species\n        status\n        image\n      }\n    }\n  }\n`\n\ninterface IData {\n  characters: ICharacters\n}\n\ninterface ICharacters {\n  info: {\n    count: number\n    next: number\n    pages: number\n    prev: string | null\n  }\n  results: ICharacter[]\n}\n\ninterface ICharacter {\n  id: string\n  image: string\n  name: string\n  species: string\n  status: string\n  __typename: string\n}\n\ntype Options = {\n  searchText: string\n}\n\nfunction App() {\n  const [searchValue, setSearchValue] = useState<string>('')\n  const [searchText, setSearchText] = useState<string>('')\n\n  const debouncedSearchValue = useDebounce(searchValue)\n\n  const { loading, data } = useQuery<IData, Options>(CHARACTERS, {\n    variables: {\n      searchText,\n    },\n  })\n\n  const characters = useMemo(() => data?.characters?.results, [data])\n\n  useEffect(() => {\n    if (searchValue.length > 2) setSearchText(searchValue)\n  }, [debouncedSearchValue])\n\n  return (\n    <main className=\"App\">\n      <SearchBar value={searchValue} setSearchValue={setSearchValue} />\n      {loading && <Preloader />}\n      <Container>\n        {characters && characters.length > 0 ?\n        characters.map(({ id, name, image, status, species }) => (\n          <Card\n            key={id}\n            species={species}\n            status={status}\n            name={name}\n            image={image}\n          />\n        )) : \"Unknown character...\"}\n      </Container>\n    </main>\n  )\n}\n\nexport default App\n","import { useEffect, useState } from 'react'\n\ntype Debounce = {\n  (value: string, delay?: number): string\n}\nexport const useDebounce: Debounce = (value, delay = 500) => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport App from './App';\n\nconst client = new ApolloClient({\n    uri: \"https://rickandmortyapi.com/graphql\",\n    cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App/>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}